---
version: '3.7'
services:

########################################################################################
# Watchtower
# https://github.com/containrrr/watchtower
# As an alternative to Watchtower, look at https://github.com/pyouroboros/ouroboros
########################################################################################

  watchtower: # https://github.com/containrrr/watchtower
    container_name: watchtower
    restart: always
    image: containrrr/watchtower:latest
    environment:
      - TZ=${TZ}
      - WATCHTOWER_NOTIFICATIONS=gotify
      - WATCHTOWER_NOTIFICATION_GOTIFY_URL=https://gotify.${FQDN}
      - WATCHTOWER_NOTIFICATION_GOTIFY_TOKEN=${GOTIFY_WATCHTOWER}
      #- WATCHTOWER_NOTIFICATIONS=email
      #- WATCHTOWER_NOTIFICATION_EMAIL_FROM=${EMAIL_FROM}
      #- WATCHTOWER_NOTIFICATION_EMAIL_TO=${EMAIL_TO}
      #- WATCHTOWER_NOTIFICATION_EMAIL_SERVER=smtp.gmail.com
      #- WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=${EMAIL_FROM}
      #- WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=${EMAIL_PASSWORD}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend
    # Cron Expression of 6 fields: <second> <minute> <hour> <day-of-month> <month> <day-of-week>
    command: --schedule "0 30 3 * * *" --cleanup
    # Checks for new container images everyday at 3:30am

########################################################################################
# DuckDNS
# https://hub.docker.com/r/linuxserver/duckdns
########################################################################################

  duckdns:
    image: ghcr.io/linuxserver/duckdns
    container_name: duckdns
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - SUBDOMAINS=${DUCKDNS_SUBDOMAINS}
      - TOKEN=${DUCKDNS_TOKEN}
      - LOG_FILE=true #optional
    volumes:
      - ${CONFIG_DIR}/duckdns:/config #optional
    networks:
      - backend
    restart: unless-stopped

########################################################################################
# oauth2
########################################################################################

  # Google OAuth - Single Sign On using OAuth 2.0 for Traefik 2.2
  oauth:
    image: thomseddon/traefik-forward-auth:2.2.0-arm # Use this image with Raspberry Pi
    container_name: oauth
    #image: thomseddon/traefik-forward-auth:latest
    security_opt:
      - no-new-privileges:true
    environment:
      - PROVIDERS_GENERIC_OAUTH_CLIENT_ID=$GITHUB_CLIENT_ID
      - PROVIDERS_GENERIC_OAUTH_CLIENT_SECRET=$GITHUB_CLIENT_SECRET
      - PROVIDERS_GENERIC_OAUTH_USER_URL=https://api.github.com/user
      - PROVIDERS_GENERIC_OAUTH_AUTH_URL=https://github.com/login/oauth/authorize
      - PROVIDERS_GENERIC_OAUTH_TOKEN_URL=https://github.com/login/oauth/access_token
      - SECRET=$OAUTH2_PROXY_COOKIE_SECRET
      - COOKIE_DOMAIN=${FQDN}
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth.${FQDN} # Note: This should be considered advanced usage, if you are having problems please try disabling this option and then re-read the Auth Host Mode section.
      - URL_PATH=/_oauth
      - WHITELIST=${WHITELIST} # Ensure your email is publicly visible on GitHub, otherwise you will get a "not authorized" message when logging in.
      - LOG_LEVEL=warn
      - LOG_FORMAT=text
      - LIFETIME=2592000 # 30 days
      - DEFAULT_ACTION=auth
      - DEFAULT_PROVIDER=generic-oauth # use generic-oauth for GitHub
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.oauth-rtr.entrypoints=websecure"
      - "traefik.http.routers.oauth-rtr.rule=Host(`oauth.$FQDN`)"
      ## Middlewares
      - "traefik.http.routers.oauth-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.oauth-rtr.service=oauth-svc"
      - "traefik.http.services.oauth-svc.loadbalancer.server.port=4181"
    networks:
      - backend
    restart: unless-stopped

########################################################################################
# Traefik
# https://hub.docker.com/_/traefik
########################################################################################

  traefik:
    image: traefik:vacherin # the vacherin tag refers to v2.7.x
    container_name: traefik
    restart: unless-stopped
    command: # CLI arguments
      - --pilot.token=${TRAEFIK_PILOT_TOKEN}
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.web.address=:80 # http
      - --entryPoints.websecure.address=:443 # https
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      #- --entrypoints.websecure.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      - --api=true
      # - --api.insecure=true
      - --serversTransport.insecureSkipVerify=true # Required for Unifi since it comes with a self-signed certificate
      - --log=true
      - --log.level=WARN # (Default: ERROR) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/etc/traefik/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock # Connection to the Docker host. Consider using Docker Socket Proxy instead for improved security
      # - --providers.docker.endpoint=tcp://socket-proxy:2375
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$FQDN`)
      - --providers.docker.exposedByDefault=false
      # - --entrypoints.websecure.http.middlewares=chain-authelia@file
      # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.websecure.http.tls.certresolver=duckdns # Comment out this line after first run of traefik to force the use of wildcard certs
      - --entrypoints.websecure.http.tls.domains[0].main=${FQDN}
      - --entrypoints.websecure.http.tls.domains[0].sans=*.${FQDN}
      # Comment out the below 3 entries if only using one domain
      - --entrypoints.websecure2.http.tls.certresolver=cloudflare
      - --entrypoints.websecure2.http.tls.domains[0].main=${FQDN2}
      - --entrypoints.websecure2.http.tls.domains[0].sans=*.${FQDN2}
      # - --entrypoints.websecure.http.tls.domains[1].main=$DOMAIN # Pulls main cert for second domain
      # - --entrypoints.websecure.http.tls.domains[1].sans=*.$DOMAIN # Pulls wildcard cert for second domain
      # - --providers.docker.network=backend # Defines a default docker network to use for connections to all containers. Setting this will cause issues if a container uses network_mode
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/etc/traefik/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # - --certificatesresolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesresolvers.duckdns.acme.email=${EMAIL}
      - --certificatesresolvers.duckdns.acme.storage=/etc/traefik/acme/acme.json
      - --certificatesresolvers.duckdns.acme.dnschallenge.provider=duckdns
      - --certificatesresolvers.duckdns.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53
      - --certificatesresolvers.duckdns.acme.dnschallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
      # Comment out the below 5 entries if not using Cloudflare
      - --certificatesresolvers.cloudflare.acme.email=${EMAIL}
      - --certificatesresolvers.cloudflare.acme.storage=/etc/traefik/acme/acme.json
      - --certificatesresolvers.cloudflare.acme.dnschallenge=true
      - --certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.cloudflare.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53
      - --certificatesresolvers.cloudflare.acme.dnschallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
    networks:
      - frontend
      - backend
    #   socket_proxy:
    # depends_on:
    #   - socket-proxy
    security_opt:
      - no-new-privileges:true
    ports:
      # https://www.reddit.com/r/docker/comments/c1wrep/traefik_reverse_proxy_question_docker_overlay/
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      # - target: 8080
      #   published: 8080
      #   protocol: tcp
      #   mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # Use Docker Socket Proxy instead for improved security
      - ${CONFIG_DIR}/shared:/shared # for use with basic auth
      - ${CONFIG_DIR}/traefik2:/etc/traefik
      # traefik2
      # ├── acme
      # │   └── acme.json # cert location - you must touch this file and change permissions to 600
      # ├── rules # file provider directory
      # │   ├── app-plex.yml
      # │   ├── middleware-chains.yml
      # │   └── middleware.yml
      # └── traefik.log # for fail2ban - make sure to touch file before starting container
      #
      # Tip: Use Subversion to quickly download the Traefik2 folder into the config directory.
      # svn export https://github.com/etho201/docker-pi-stacks/trunk/config/traefik2
    environment:
      - DUCKDNS_TOKEN=${DUCKDNS_TOKEN}
      - CF_API_EMAIL=${CF_API_EMAIL} # Comment out if not using Cloudflare
      - CF_API_KEY=${CF_API_KEY} # Comment out if not using Cloudflare
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=websecure"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$FQDN`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      # - "traefik.http.routers.traefik-rtr.middlewares=chain-authelia@file"
      # - "traefik.http.routers.traefik-rtr.middlewares=chain-no-auth@file" # No Authentication
      - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file" # Google OAuth 2.0

########################################################################################
# whoami
# https://hub.docker.com/r/containous/whoami
# A container that exposes an API to show its IP address
# Tiny Go webserver that prints OS information and HTTP request to output
########################################################################################

  # whoami:
  #   image: containous/whoami
  #   container_name: whoami
  #   networks:
  #     - backend
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.whoami-rtr.entrypoints=websecure"
  #     - "traefik.http.routers.whoami-rtr.rule=Host(`whoami.${FQDN}`)"
  #     - "traefik.http.routers.whoami-rtr.tls=true"
  #     ## Middlewares
  #     # - "traefik.http.routers.whoami-rtr.middlewares=chain-no-auth@file" # No Authentication
  #     # - "traefik.http.routers.whoami-rtr.middlewares=chain-basic-auth@file" # Basic Authentication
  #     - "traefik.http.routers.whoami-rtr.middlewares=chain-oauth@file" # Google OAuth 2.0
  #     ## HTTP Services
  #     - "traefik.http.routers.whoami-rtr.service=whoami-svc"
  #     - "traefik.http.services.whoami-svc.loadbalancer.server.port=80"

########################################################################################
# Gotify
# https://gotify.net/docs/config
########################################################################################

  gotify:
    image: gotify/server-arm7 # for Raspberry Pi
    container_name: gotify
    restart: unless-stopped
    volumes:
        - ${CONFIG_DIR}/gotify:/app/data
    environment:
        - GOTIFY_SERVER_PORT=80
        #- GOTIFY_SERVER_LISTENADDR=
        - GOTIFY_SERVER_SSL_ENABLED=false
        - GOTIFY_SERVER_SSL_REDIRECTTOHTTPS=true
        #- GOTIFY_SERVER_SSL_LISTENADDR=
        - GOTIFY_SERVER_SSL_PORT=443
        #- GOTIFY_SERVER_SSL_CERTFILE=
        #- GOTIFY_SERVER_SSL_CERTKEY=
        #- GOTIFY_SERVER_SSL_LETSENCRYPT_ENABLED=false
        #- GOTIFY_SERVER_SSL_LETSENCRYPT_ACCEPTTOS=false
        #- GOTIFY_DATABASE_DIALECT=sqlite3
        #- GOTIFY_DATABASE_CONNECTION=gotify.db
        - GOTIFY_DEFAULTUSER_NAME=${USERNAME}
        - GOTIFY_DEFAULTUSER_PASS=${GOTIFY_PASSWORD}
    networks:
      - backend
    #ports:
      #- 443:443
      #- 80:80
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.gotify-rtr.entrypoints=websecure"
      - "traefik.http.routers.gotify-rtr.rule=Host(`gotify.$FQDN`)"
      - "traefik.http.routers.gotify-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.gotify-rtr.middlewares=chain-no-auth@file" # No Authentication
      # - "traefik.http.routers.gotify-rtr.middlewares=chain-basic-auth@file" # Basic Authentication
      # - "traefik.http.routers.gotify-rtr.middlewares=chain-oauth@file" # OAuth 2.0
      ## HTTP Services
      - "traefik.http.routers.gotify-rtr.service=gotify-svc"
      - "traefik.http.services.gotify-svc.loadbalancer.server.port=80"

########################################################################################
# Media
# https://hub.docker.com/r/linuxserver/plex
# https://hub.docker.com/r/linuxserver/tautulli
########################################################################################

  plex:
    image: ghcr.io/linuxserver/plex
    #image: linuxserver/plex:1.21.0.3616-d87012962-ls4
    container_name: plex
    network_mode: host
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - VERSION=docker
      - PLEX_CLAIM=${PLEX_CLAIM} # Optionally you can obtain a claim token from https://plex.tv/claim and input here. Keep in mind that the claim tokens expire within 4 minutes. If you're having trouble claiming the Plex server, delete the "Preferences.xml" and "plexmediaserver.pid" from ${CONFIG_DIR}/plex and try again.
    volumes:
      - ${CONFIG_DIR}/plex:/config
      - ${EXTHDD_DIR}/media:/data
      #- ${EXTHDD_DIR}/media/tv:/data/tvshows
      #- ${EXTHDD_DIR}/media/movies:/data/movies
      #- ${EXTHDD_DIR}/media/music:/data/music
      #- ${EXTHDD_DIR}/media/other:/data/other
      - ${VOLUME_DIR}/plex/transcode:/transcode
    restart: unless-stopped

  tautulli:
    image: ghcr.io/linuxserver/tautulli
    container_name: tautulli
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${CONFIG_DIR}/tautulli:/config
      - ${CONFIG_DIR}/plex/Library/Application Support/Plex Media Server/Logs:/logs:ro #Map this to Plex log directory - recommended RO.
    #ports:
      #- 8181:8181
    restart: unless-stopped
    networks:
      - backend
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.tautulli-rtr.entrypoints=websecure"
      - "traefik.http.routers.tautulli-rtr.rule=Host(`tautulli.$FQDN`)"
      - "traefik.http.routers.tautulli-rtr.tls=true"
      ## Middlewares
      # - "traefik.http.routers.tautulli-rtr.middlewares=chain-no-auth@file" # No Authentication
      # - "traefik.http.routers.tautulli-rtr.middlewares=chain-basic-auth@file" # Basic Authentication
      - "traefik.http.routers.tautulli-rtr.middlewares=chain-oauth@file" # OAuth 2.0
      ## HTTP Services
      - "traefik.http.routers.tautulli-rtr.service=tautulli-svc"
      - "traefik.http.services.tautulli-svc.loadbalancer.server.port=8181"

########################################################################################
# Organize
# https://hub.docker.com/r/linuxserver/heimdall/
########################################################################################

  heimdall:
    image: ghcr.io/linuxserver/heimdall
    container_name: heimdall
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${CONFIG_DIR}/heimdall:/config
    #ports:
      #- 80:80
      #- 443:443
    restart: unless-stopped
    networks:
      - backend
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.heimdall-rtr.entrypoints=websecure"
      - "traefik.http.routers.heimdall-rtr.rule=Host(`${FQDN}`)"
      - "traefik.http.routers.heimdall-rtr.tls=true"
      ## Middlewares
      # - "traefik.http.routers.heimdall-rtr.middlewares=chain-no-auth@file" # No Authentication
      # - "traefik.http.routers.heimdall-rtr.middlewares=chain-basic-auth@file" # Basic Authentication
      - "traefik.http.routers.heimdall-rtr.middlewares=chain-oauth@file" # OAuth 2.0
      ## HTTP Services
      - "traefik.http.routers.heimdall-rtr.service=heimdall-svc"
      - "traefik.http.services.heimdall-svc.loadbalancer.server.port=80"

########################################################################################
# Portainer
# https://hub.docker.com/r/portainer/portainer
########################################################################################

  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${CONFIG_DIR}/portainer:/data
    environment:
      - TZ=${TZ}
    #ports:
      #- 9000:9000
    restart: unless-stopped
    networks:
      - backend
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.portainer-rtr.entrypoints=websecure"
      - "traefik.http.routers.portainer-rtr.rule=Host(`portainer.$FQDN`)"
      - "traefik.http.routers.portainer-rtr.tls=true"
      ## Middlewares
      # - "traefik.http.routers.portainer-rtr.middlewares=chain-no-auth@file" # No Authentication
      # - "traefik.http.routers.portainer-rtr.middlewares=chain-basic-auth@file" # Basic Authentication
      - "traefik.http.routers.service-rtr.middlewares=chain-authelia@file"
      # - "traefik.http.routers.portainer-rtr.middlewares=chain-oauth@file" # Google OAuth 2.0
      ## HTTP Services
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"

########################################################################################
# Nextcloud
# https://hub.docker.com/_/postgres
# https://hub.docker.com/_/nextcloud
########################################################################################

#  db:
#    container_name: MariaDB
#    image: mariadb:latest
#    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
#    restart: unless-stopped
#    volumes:
#      - db:/var/lib/mysql
#    environment:
#      - MYSQL_ROOT_PASSWORD=
#      - MYSQL_PASSWORD=
#      - MYSQL_DATABASE=nextcloud
#      - MYSQL_USER=nextcloud

  nextcloud-db:
    image: postgres:13.2 # latest as of 3/15/2021
    container_name: nextcloud-db
    # ports:
    #   - 5432:5432
    volumes:
      - ${VOLUME_DIR}/nextcloud-db:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=nextcloud
      - POSTGRES_PASSWORD=${NEXTCLOUD_DB_PASS}
      # Do not create the 'nextcloud' database here. Doing so will cause the Nextcloud installation to fail. The nextcloud container handles this automatically; however, you must create at least one other database first (for example: whatever).
      # - POSTGRES_DB=nextcloud
      - POSTGRES_DB=whatever
    restart: unless-stopped
    networks:
      - backend

  nextcloud:
    image: nextcloud:latest
    container_name: nextcloud
    #ports:
      #- 8081:80
    links:
      - nextcloud-db
    volumes:
      - ${CONFIG_DIR}/nextcloud:/var/www/html #config directory
      - ${VOLUME_DIR}/nextcloud:/var/www/html/data:rw #data directory
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - POSTGRES_HOST=nextcloud-db
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=nextcloud
      - POSTGRES_PASSWORD=${NEXTCLOUD_DB_PASS}
      - NEXTCLOUD_ADMIN_USER=${USERNAME}
      - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_PASSWORD}
      - NEXTCLOUD_TRUSTED_DOMAINS=nextcloud.${FQDN}
    domainname: nextcloud.${FQDN}
    networks:
      - backend
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.nextcloud-rtr.entrypoints=websecure"
      - "traefik.http.routers.nextcloud-rtr.rule=Host(`nextcloud.$FQDN`)"
      - "traefik.http.routers.nextcloud-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.nextcloud-rtr.middlewares=chain-no-auth@file" # No Authentication
      # - "traefik.http.routers.nextcloud-rtr.middlewares=chain-basic-auth@file" # Basic Authentication
      # - "traefik.http.routers.nextcloud-rtr.middlewares=chain-oauth@file" # OAuth 2.0
      ## HTTP Services
      - "traefik.http.routers.nextcloud-rtr.service=nextcloud-svc"
      - "traefik.http.services.nextcloud-svc.loadbalancer.server.port=80"

networks:
  frontend:
    external:
      name: frontend
      #run: docker network create frontend
  backend:
    external:
      name: backend
      #run: docker network create backend
